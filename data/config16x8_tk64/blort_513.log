==PROF== Connected to process 15841 (/home/ubuntu/pa2-nwahi-ygala/mmpy)
==PROF== Profiling "matMul" - 1: 0%....50%....100% - 32 passes
==PROF== Profiling "matMul" - 2: 0%....50%....100% - 32 passes
==PROF== Profiling "matMul" - 3: 0%....50%....100% - 32 passes
==PROF== Profiling "matMul" - 4: 0%....50%....100% - 32 passes
==PROF== Profiling "matMul" - 5: 0%....50%....100% - 32 passes
==PROF== Profiling "matMul" - 6: 0%....50%....100% - 32 passes
==PROF== Profiling "matMul" - 7: 0%....50%....100% - 32 passes
==PROF== Profiling "matMul" - 8: 0%....50%....100% - 32 passes
==PROF== Profiling "matMul" - 9: 0%....50%....100% - 32 passes
==PROF== Profiling "matMul" - 10: 0%....50%....100% - 32 passes
==PROF== Profiling "matMul" - 11: 0%....50%....100% - 32 passes
==PROF== Disconnected from process 15841
[15841] mmpy@127.0.0.1
  matMul(int, float *, float *, float *), 2024-May-13 21:09:43, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           4.97
    SM Frequency                                                             cycle/usecond                         582.41
    Elapsed Cycles                                                                   cycle                         231200
    Memory [%]                                                                           %                          27.90
    DRAM Throughput                                                                      %                           3.37
    Duration                                                                       usecond                         396.96
    L1/TEX Cache Throughput                                                              %                          46.81
    L2 Cache Throughput                                                                  %                           3.93
    SM Active Cycles                                                                 cycle                      142141.33
    Compute (SM) [%]                                                                     %                          31.77
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel grid is too small to fill the available resources on this device, resulting in only 0.6 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 24%   
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for mode details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Executed Ipc Active                                                         inst/cycle                           1.54
    Executed Ipc Elapsed                                                        inst/cycle                           0.95
    Issue Slots Busy                                                                     %                          38.49
    Issued Ipc Active                                                           inst/cycle                           1.54
    SM Busy                                                                              %                          51.67
    ---------------------------------------------------------------------- --------------- ------------------------------
          No compute pipeline is over-utilized.                                                                         

    Section: Memory Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Memory Throughput                                                         Gbyte/second                          10.73
    Mem Busy                                                                             %                          23.40
    Max Bandwidth                                                                        %                          27.90
    L1/TEX Hit Rate                                                                      %                          26.21
    L2 Hit Rate                                                                          %                          87.40
    Mem Pipes Busy                                                                       %                          27.90
    ---------------------------------------------------------------------- --------------- ------------------------------

    WRN   The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.6 sectors per request, or 5.6*32 = 179.9 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.3 sectors per request, or 5.3*32 = 169.2 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    One or More Eligible                                                                 %                          38.39
    Issued Warp Per Scheduler                                                                                        0.38
    No Eligible                                                                          %                          61.61
    Active Warps Per Scheduler                                                        warp                           1.00
    Eligible Warps Per Scheduler                                                      warp                           0.38
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          1.00 active warps per scheduler, which already limits the scheduler to less than a warp per instruction.      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The 1.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. Use the Occupancy section to identify what limits this kernel's theoretical occupancy. 

    Section: Warp State Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Warp Cycles Per Issued Instruction                                               cycle                           2.60
    Warp Cycles Per Executed Instruction                                             cycle                           2.60
    Avg. Active Threads Per Warp                                                                                    25.96
    Avg. Not Predicated Off Threads Per Warp                                                                        25.53
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   On average, each warp of this kernel spends 1.1 cycles being stalled on a fixed latency execution dependency. 
          This represents about 41.0% of the total average of 2.6 cycles between issuing two instructions. Typically,   
          this stall reason should be very low and only shows up as a top contributor in already highly optimized       
          kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps,        
          restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions,     
          e.g. by making use of fast math compiler options.                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Source Counters section for the top stall locations in your source based on sampling data. The      
          Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides   
          more details on each stall reason.                                                                            

    Section: Instruction Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Avg. Executed Instructions Per Scheduler                                          inst                       54705.81
    Executed Instructions                                                             inst                        8752930
    Avg. Issued Instructions Per Scheduler                                            inst                       54708.31
    Issued Instructions                                                               inst                        8753330
    ---------------------------------------------------------------------- --------------- ------------------------------

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                        128
    Function Cache Configuration                                                                cudaFuncCachePreferShared
    Grid Size                                                                                                          25
    Registers Per Thread                                                   register/thread                            255
    Shared Memory Configuration Size                                                 Kbyte                          65.54
    Driver Shared Memory Per Block                                              byte/block                              0
    Dynamic Shared Memory Per Block                                            Kbyte/block                          65.54
    Static Shared Memory Per Block                                              byte/block                              0
    Threads                                                                         thread                           3200
    Waves Per SM                                                                                                     0.62
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   The grid for this launch is configured to execute only 25 blocks, which is less than the GPU's 40             
          multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel      
          concurrently with other workloads, consider reducing the block size to have at least one block per            
          multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the    
          Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model)            
          description for more details on launch configurations.                                                        

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             16
    Block Limit Registers                                                            block                              2
    Block Limit Shared Mem                                                           block                              1
    Block Limit Warps                                                                block                              8
    Theoretical Active Warps per SM                                                   warp                              4
    Theoretical Occupancy                                                                %                          12.50
    Achieved Occupancy                                                                   %                          12.50
    Achieved Active Warps Per SM                                                      warp                           4.00
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (12.5%) is limited by the required amount of shared memory See the CUDA   
          Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for      
          more details on optimizing occupancy.                                                                         

    Section: Source Counters
    ---------------------------------------------------------------------- --------------- ------------------------------
    Branch Instructions Ratio                                                            %                           0.01
    Branch Instructions                                                               inst                          47523
    Branch Efficiency                                                                    %                          99.59
    Avg. Divergent Branches                                                                                          1.18
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel has uncoalesced global accesses resulting in a total of 160512 excessive sectors (31% of the      
          total 524491 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source         
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   This kernel has uncoalesced shared accesses resulting in a total of 771840 excessive wavefronts (40% of the   
          total 1933560 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -aa) has an example on optimizing shared memory accesses.                                                     

  matMul(int, float *, float *, float *), 2024-May-13 21:09:46, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           4.97
    SM Frequency                                                             cycle/usecond                         582.14
    Elapsed Cycles                                                                   cycle                         231168
    Memory [%]                                                                           %                          27.90
    DRAM Throughput                                                                      %                           3.35
    Duration                                                                       usecond                         397.09
    L1/TEX Cache Throughput                                                              %                          46.81
    L2 Cache Throughput                                                                  %                           3.93
    SM Active Cycles                                                                 cycle                      142148.08
    Compute (SM) [%]                                                                     %                          31.77
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel grid is too small to fill the available resources on this device, resulting in only 0.6 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 24%   
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for mode details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Executed Ipc Active                                                         inst/cycle                           1.54
    Executed Ipc Elapsed                                                        inst/cycle                           0.95
    Issue Slots Busy                                                                     %                          38.49
    Issued Ipc Active                                                           inst/cycle                           1.54
    SM Busy                                                                              %                          51.67
    ---------------------------------------------------------------------- --------------- ------------------------------
          No compute pipeline is over-utilized.                                                                         

    Section: Memory Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Memory Throughput                                                         Gbyte/second                          10.67
    Mem Busy                                                                             %                          23.41
    Max Bandwidth                                                                        %                          27.90
    L1/TEX Hit Rate                                                                      %                          26.20
    L2 Hit Rate                                                                          %                          87.42
    Mem Pipes Busy                                                                       %                          27.90
    ---------------------------------------------------------------------- --------------- ------------------------------

    WRN   The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.6 sectors per request, or 5.6*32 = 179.9 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.3 sectors per request, or 5.3*32 = 169.2 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    One or More Eligible                                                                 %                          38.38
    Issued Warp Per Scheduler                                                                                        0.38
    No Eligible                                                                          %                          61.62
    Active Warps Per Scheduler                                                        warp                           1.00
    Eligible Warps Per Scheduler                                                      warp                           0.38
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          1.00 active warps per scheduler, which already limits the scheduler to less than a warp per instruction.      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The 1.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. Use the Occupancy section to identify what limits this kernel's theoretical occupancy. 

    Section: Warp State Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Warp Cycles Per Issued Instruction                                               cycle                           2.60
    Warp Cycles Per Executed Instruction                                             cycle                           2.60
    Avg. Active Threads Per Warp                                                                                    25.96
    Avg. Not Predicated Off Threads Per Warp                                                                        25.53
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   On average, each warp of this kernel spends 1.1 cycles being stalled on a fixed latency execution dependency. 
          This represents about 41.0% of the total average of 2.6 cycles between issuing two instructions. Typically,   
          this stall reason should be very low and only shows up as a top contributor in already highly optimized       
          kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps,        
          restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions,     
          e.g. by making use of fast math compiler options.                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Source Counters section for the top stall locations in your source based on sampling data. The      
          Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides   
          more details on each stall reason.                                                                            

    Section: Instruction Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Avg. Executed Instructions Per Scheduler                                          inst                       54705.81
    Executed Instructions                                                             inst                        8752930
    Avg. Issued Instructions Per Scheduler                                            inst                       54708.31
    Issued Instructions                                                               inst                        8753330
    ---------------------------------------------------------------------- --------------- ------------------------------

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                        128
    Function Cache Configuration                                                                cudaFuncCachePreferShared
    Grid Size                                                                                                          25
    Registers Per Thread                                                   register/thread                            255
    Shared Memory Configuration Size                                                 Kbyte                          65.54
    Driver Shared Memory Per Block                                              byte/block                              0
    Dynamic Shared Memory Per Block                                            Kbyte/block                          65.54
    Static Shared Memory Per Block                                              byte/block                              0
    Threads                                                                         thread                           3200
    Waves Per SM                                                                                                     0.62
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   The grid for this launch is configured to execute only 25 blocks, which is less than the GPU's 40             
          multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel      
          concurrently with other workloads, consider reducing the block size to have at least one block per            
          multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the    
          Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model)            
          description for more details on launch configurations.                                                        

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             16
    Block Limit Registers                                                            block                              2
    Block Limit Shared Mem                                                           block                              1
    Block Limit Warps                                                                block                              8
    Theoretical Active Warps per SM                                                   warp                              4
    Theoretical Occupancy                                                                %                          12.50
    Achieved Occupancy                                                                   %                          12.50
    Achieved Active Warps Per SM                                                      warp                           4.00
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (12.5%) is limited by the required amount of shared memory See the CUDA   
          Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for      
          more details on optimizing occupancy.                                                                         

    Section: Source Counters
    ---------------------------------------------------------------------- --------------- ------------------------------
    Branch Instructions Ratio                                                            %                           0.01
    Branch Instructions                                                               inst                          47523
    Branch Efficiency                                                                    %                          99.59
    Avg. Divergent Branches                                                                                          1.18
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel has uncoalesced global accesses resulting in a total of 160512 excessive sectors (31% of the      
          total 524491 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source         
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   This kernel has uncoalesced shared accesses resulting in a total of 771840 excessive wavefronts (40% of the   
          total 1933560 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -aa) has an example on optimizing shared memory accesses.                                                     

  matMul(int, float *, float *, float *), 2024-May-13 21:09:48, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           4.98
    SM Frequency                                                             cycle/usecond                         582.55
    Elapsed Cycles                                                                   cycle                         231124
    Memory [%]                                                                           %                          27.91
    DRAM Throughput                                                                      %                           3.36
    Duration                                                                       usecond                         396.74
    L1/TEX Cache Throughput                                                              %                          46.82
    L2 Cache Throughput                                                                  %                           3.93
    SM Active Cycles                                                                 cycle                      142252.58
    Compute (SM) [%]                                                                     %                          31.78
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel grid is too small to fill the available resources on this device, resulting in only 0.6 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 24%   
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for mode details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Executed Ipc Active                                                         inst/cycle                           1.54
    Executed Ipc Elapsed                                                        inst/cycle                           0.95
    Issue Slots Busy                                                                     %                          38.46
    Issued Ipc Active                                                           inst/cycle                           1.54
    SM Busy                                                                              %                          51.63
    ---------------------------------------------------------------------- --------------- ------------------------------
          No compute pipeline is over-utilized.                                                                         

    Section: Memory Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Memory Throughput                                                         Gbyte/second                          10.70
    Mem Busy                                                                             %                          23.41
    Max Bandwidth                                                                        %                          27.91
    L1/TEX Hit Rate                                                                      %                          26.20
    L2 Hit Rate                                                                          %                          87.43
    Mem Pipes Busy                                                                       %                          27.91
    ---------------------------------------------------------------------- --------------- ------------------------------

    WRN   The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.6 sectors per request, or 5.6*32 = 179.9 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.3 sectors per request, or 5.3*32 = 169.2 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    One or More Eligible                                                                 %                          38.41
    Issued Warp Per Scheduler                                                                                        0.38
    No Eligible                                                                          %                          61.59
    Active Warps Per Scheduler                                                        warp                           1.00
    Eligible Warps Per Scheduler                                                      warp                           0.38
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          1.00 active warps per scheduler, which already limits the scheduler to less than a warp per instruction.      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The 1.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. Use the Occupancy section to identify what limits this kernel's theoretical occupancy. 

    Section: Warp State Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Warp Cycles Per Issued Instruction                                               cycle                           2.60
    Warp Cycles Per Executed Instruction                                             cycle                           2.60
    Avg. Active Threads Per Warp                                                                                    25.96
    Avg. Not Predicated Off Threads Per Warp                                                                        25.53
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   On average, each warp of this kernel spends 1.1 cycles being stalled on a fixed latency execution dependency. 
          This represents about 41.0% of the total average of 2.6 cycles between issuing two instructions. Typically,   
          this stall reason should be very low and only shows up as a top contributor in already highly optimized       
          kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps,        
          restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions,     
          e.g. by making use of fast math compiler options.                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Source Counters section for the top stall locations in your source based on sampling data. The      
          Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides   
          more details on each stall reason.                                                                            

    Section: Instruction Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Avg. Executed Instructions Per Scheduler                                          inst                       54705.81
    Executed Instructions                                                             inst                        8752930
    Avg. Issued Instructions Per Scheduler                                            inst                       54708.31
    Issued Instructions                                                               inst                        8753330
    ---------------------------------------------------------------------- --------------- ------------------------------

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                        128
    Function Cache Configuration                                                                cudaFuncCachePreferShared
    Grid Size                                                                                                          25
    Registers Per Thread                                                   register/thread                            255
    Shared Memory Configuration Size                                                 Kbyte                          65.54
    Driver Shared Memory Per Block                                              byte/block                              0
    Dynamic Shared Memory Per Block                                            Kbyte/block                          65.54
    Static Shared Memory Per Block                                              byte/block                              0
    Threads                                                                         thread                           3200
    Waves Per SM                                                                                                     0.62
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   The grid for this launch is configured to execute only 25 blocks, which is less than the GPU's 40             
          multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel      
          concurrently with other workloads, consider reducing the block size to have at least one block per            
          multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the    
          Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model)            
          description for more details on launch configurations.                                                        

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             16
    Block Limit Registers                                                            block                              2
    Block Limit Shared Mem                                                           block                              1
    Block Limit Warps                                                                block                              8
    Theoretical Active Warps per SM                                                   warp                              4
    Theoretical Occupancy                                                                %                          12.50
    Achieved Occupancy                                                                   %                          12.50
    Achieved Active Warps Per SM                                                      warp                           4.00
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (12.5%) is limited by the required amount of shared memory See the CUDA   
          Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for      
          more details on optimizing occupancy.                                                                         

    Section: Source Counters
    ---------------------------------------------------------------------- --------------- ------------------------------
    Branch Instructions Ratio                                                            %                           0.01
    Branch Instructions                                                               inst                          47523
    Branch Efficiency                                                                    %                          99.59
    Avg. Divergent Branches                                                                                          1.18
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel has uncoalesced global accesses resulting in a total of 160512 excessive sectors (31% of the      
          total 524491 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source         
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   This kernel has uncoalesced shared accesses resulting in a total of 771840 excessive wavefronts (40% of the   
          total 1933560 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -aa) has an example on optimizing shared memory accesses.                                                     

  matMul(int, float *, float *, float *), 2024-May-13 21:09:51, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           4.97
    SM Frequency                                                             cycle/usecond                         581.83
    Elapsed Cycles                                                                   cycle                         231174
    Memory [%]                                                                           %                          27.90
    DRAM Throughput                                                                      %                           3.36
    Duration                                                                       usecond                         397.31
    L1/TEX Cache Throughput                                                              %                          46.81
    L2 Cache Throughput                                                                  %                           3.93
    SM Active Cycles                                                                 cycle                      142235.02
    Compute (SM) [%]                                                                     %                          31.77
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel grid is too small to fill the available resources on this device, resulting in only 0.6 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 24%   
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for mode details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Executed Ipc Active                                                         inst/cycle                           1.54
    Executed Ipc Elapsed                                                        inst/cycle                           0.95
    Issue Slots Busy                                                                     %                          38.46
    Issued Ipc Active                                                           inst/cycle                           1.54
    SM Busy                                                                              %                          51.64
    ---------------------------------------------------------------------- --------------- ------------------------------
          No compute pipeline is over-utilized.                                                                         

    Section: Memory Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Memory Throughput                                                         Gbyte/second                          10.69
    Mem Busy                                                                             %                          23.41
    Max Bandwidth                                                                        %                          27.90
    L1/TEX Hit Rate                                                                      %                          26.21
    L2 Hit Rate                                                                          %                          87.41
    Mem Pipes Busy                                                                       %                          27.90
    ---------------------------------------------------------------------- --------------- ------------------------------

    WRN   The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.6 sectors per request, or 5.6*32 = 179.9 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.3 sectors per request, or 5.3*32 = 169.2 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    One or More Eligible                                                                 %                          38.38
    Issued Warp Per Scheduler                                                                                        0.38
    No Eligible                                                                          %                          61.62
    Active Warps Per Scheduler                                                        warp                           1.00
    Eligible Warps Per Scheduler                                                      warp                           0.38
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          1.00 active warps per scheduler, which already limits the scheduler to less than a warp per instruction.      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The 1.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. Use the Occupancy section to identify what limits this kernel's theoretical occupancy. 

    Section: Warp State Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Warp Cycles Per Issued Instruction                                               cycle                           2.60
    Warp Cycles Per Executed Instruction                                             cycle                           2.60
    Avg. Active Threads Per Warp                                                                                    25.96
    Avg. Not Predicated Off Threads Per Warp                                                                        25.53
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   On average, each warp of this kernel spends 1.1 cycles being stalled on a fixed latency execution dependency. 
          This represents about 41.0% of the total average of 2.6 cycles between issuing two instructions. Typically,   
          this stall reason should be very low and only shows up as a top contributor in already highly optimized       
          kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps,        
          restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions,     
          e.g. by making use of fast math compiler options.                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Source Counters section for the top stall locations in your source based on sampling data. The      
          Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides   
          more details on each stall reason.                                                                            

    Section: Instruction Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Avg. Executed Instructions Per Scheduler                                          inst                       54705.81
    Executed Instructions                                                             inst                        8752930
    Avg. Issued Instructions Per Scheduler                                            inst                       54708.31
    Issued Instructions                                                               inst                        8753330
    ---------------------------------------------------------------------- --------------- ------------------------------

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                        128
    Function Cache Configuration                                                                cudaFuncCachePreferShared
    Grid Size                                                                                                          25
    Registers Per Thread                                                   register/thread                            255
    Shared Memory Configuration Size                                                 Kbyte                          65.54
    Driver Shared Memory Per Block                                              byte/block                              0
    Dynamic Shared Memory Per Block                                            Kbyte/block                          65.54
    Static Shared Memory Per Block                                              byte/block                              0
    Threads                                                                         thread                           3200
    Waves Per SM                                                                                                     0.62
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   The grid for this launch is configured to execute only 25 blocks, which is less than the GPU's 40             
          multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel      
          concurrently with other workloads, consider reducing the block size to have at least one block per            
          multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the    
          Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model)            
          description for more details on launch configurations.                                                        

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             16
    Block Limit Registers                                                            block                              2
    Block Limit Shared Mem                                                           block                              1
    Block Limit Warps                                                                block                              8
    Theoretical Active Warps per SM                                                   warp                              4
    Theoretical Occupancy                                                                %                          12.50
    Achieved Occupancy                                                                   %                          12.50
    Achieved Active Warps Per SM                                                      warp                           4.00
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (12.5%) is limited by the required amount of shared memory See the CUDA   
          Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for      
          more details on optimizing occupancy.                                                                         

    Section: Source Counters
    ---------------------------------------------------------------------- --------------- ------------------------------
    Branch Instructions Ratio                                                            %                           0.01
    Branch Instructions                                                               inst                          47523
    Branch Efficiency                                                                    %                          99.59
    Avg. Divergent Branches                                                                                          1.18
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel has uncoalesced global accesses resulting in a total of 160512 excessive sectors (31% of the      
          total 524491 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source         
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   This kernel has uncoalesced shared accesses resulting in a total of 771840 excessive wavefronts (40% of the   
          total 1933560 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -aa) has an example on optimizing shared memory accesses.                                                     

  matMul(int, float *, float *, float *), 2024-May-13 21:09:53, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           4.97
    SM Frequency                                                             cycle/usecond                         582.36
    Elapsed Cycles                                                                   cycle                         231141
    Memory [%]                                                                           %                          27.90
    DRAM Throughput                                                                      %                           3.36
    Duration                                                                       usecond                         396.90
    L1/TEX Cache Throughput                                                              %                          46.82
    L2 Cache Throughput                                                                  %                           3.93
    SM Active Cycles                                                                 cycle                         142126
    Compute (SM) [%]                                                                     %                          31.78
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel grid is too small to fill the available resources on this device, resulting in only 0.6 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 24%   
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for mode details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Executed Ipc Active                                                         inst/cycle                           1.54
    Executed Ipc Elapsed                                                        inst/cycle                           0.95
    Issue Slots Busy                                                                     %                          38.49
    Issued Ipc Active                                                           inst/cycle                           1.54
    SM Busy                                                                              %                          51.68
    ---------------------------------------------------------------------- --------------- ------------------------------
          No compute pipeline is over-utilized.                                                                         

    Section: Memory Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Memory Throughput                                                         Gbyte/second                          10.71
    Mem Busy                                                                             %                          23.41
    Max Bandwidth                                                                        %                          27.90
    L1/TEX Hit Rate                                                                      %                          26.20
    L2 Hit Rate                                                                          %                          87.44
    Mem Pipes Busy                                                                       %                          27.90
    ---------------------------------------------------------------------- --------------- ------------------------------

    WRN   The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.6 sectors per request, or 5.6*32 = 179.9 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.3 sectors per request, or 5.3*32 = 169.2 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    One or More Eligible                                                                 %                          38.41
    Issued Warp Per Scheduler                                                                                        0.38
    No Eligible                                                                          %                          61.59
    Active Warps Per Scheduler                                                        warp                           1.00
    Eligible Warps Per Scheduler                                                      warp                           0.38
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          1.00 active warps per scheduler, which already limits the scheduler to less than a warp per instruction.      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The 1.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. Use the Occupancy section to identify what limits this kernel's theoretical occupancy. 

    Section: Warp State Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Warp Cycles Per Issued Instruction                                               cycle                           2.60
    Warp Cycles Per Executed Instruction                                             cycle                           2.60
    Avg. Active Threads Per Warp                                                                                    25.96
    Avg. Not Predicated Off Threads Per Warp                                                                        25.53
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   On average, each warp of this kernel spends 1.1 cycles being stalled on a fixed latency execution dependency. 
          This represents about 41.0% of the total average of 2.6 cycles between issuing two instructions. Typically,   
          this stall reason should be very low and only shows up as a top contributor in already highly optimized       
          kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps,        
          restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions,     
          e.g. by making use of fast math compiler options.                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Source Counters section for the top stall locations in your source based on sampling data. The      
          Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides   
          more details on each stall reason.                                                                            

    Section: Instruction Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Avg. Executed Instructions Per Scheduler                                          inst                       54705.81
    Executed Instructions                                                             inst                        8752930
    Avg. Issued Instructions Per Scheduler                                            inst                       54708.31
    Issued Instructions                                                               inst                        8753330
    ---------------------------------------------------------------------- --------------- ------------------------------

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                        128
    Function Cache Configuration                                                                cudaFuncCachePreferShared
    Grid Size                                                                                                          25
    Registers Per Thread                                                   register/thread                            255
    Shared Memory Configuration Size                                                 Kbyte                          65.54
    Driver Shared Memory Per Block                                              byte/block                              0
    Dynamic Shared Memory Per Block                                            Kbyte/block                          65.54
    Static Shared Memory Per Block                                              byte/block                              0
    Threads                                                                         thread                           3200
    Waves Per SM                                                                                                     0.62
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   The grid for this launch is configured to execute only 25 blocks, which is less than the GPU's 40             
          multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel      
          concurrently with other workloads, consider reducing the block size to have at least one block per            
          multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the    
          Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model)            
          description for more details on launch configurations.                                                        

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             16
    Block Limit Registers                                                            block                              2
    Block Limit Shared Mem                                                           block                              1
    Block Limit Warps                                                                block                              8
    Theoretical Active Warps per SM                                                   warp                              4
    Theoretical Occupancy                                                                %                          12.50
    Achieved Occupancy                                                                   %                          12.50
    Achieved Active Warps Per SM                                                      warp                           4.00
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (12.5%) is limited by the required amount of shared memory See the CUDA   
          Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for      
          more details on optimizing occupancy.                                                                         

    Section: Source Counters
    ---------------------------------------------------------------------- --------------- ------------------------------
    Branch Instructions Ratio                                                            %                           0.01
    Branch Instructions                                                               inst                          47523
    Branch Efficiency                                                                    %                          99.59
    Avg. Divergent Branches                                                                                          1.18
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel has uncoalesced global accesses resulting in a total of 160512 excessive sectors (31% of the      
          total 524491 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source         
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   This kernel has uncoalesced shared accesses resulting in a total of 771840 excessive wavefronts (40% of the   
          total 1933560 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -aa) has an example on optimizing shared memory accesses.                                                     

  matMul(int, float *, float *, float *), 2024-May-13 21:09:56, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           4.97
    SM Frequency                                                             cycle/usecond                         581.92
    Elapsed Cycles                                                                   cycle                         231132
    Memory [%]                                                                           %                          27.90
    DRAM Throughput                                                                      %                           3.34
    Duration                                                                       usecond                         397.18
    L1/TEX Cache Throughput                                                              %                          46.82
    L2 Cache Throughput                                                                  %                           3.93
    SM Active Cycles                                                                 cycle                      142132.25
    Compute (SM) [%]                                                                     %                          31.78
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel grid is too small to fill the available resources on this device, resulting in only 0.6 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 24%   
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for mode details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Executed Ipc Active                                                         inst/cycle                           1.54
    Executed Ipc Elapsed                                                        inst/cycle                           0.95
    Issue Slots Busy                                                                     %                          38.49
    Issued Ipc Active                                                           inst/cycle                           1.54
    SM Busy                                                                              %                          51.67
    ---------------------------------------------------------------------- --------------- ------------------------------
          No compute pipeline is over-utilized.                                                                         

    Section: Memory Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Memory Throughput                                                         Gbyte/second                          10.64
    Mem Busy                                                                             %                          23.41
    Max Bandwidth                                                                        %                          27.90
    L1/TEX Hit Rate                                                                      %                          26.20
    L2 Hit Rate                                                                          %                          87.41
    Mem Pipes Busy                                                                       %                          27.90
    ---------------------------------------------------------------------- --------------- ------------------------------

    WRN   The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.6 sectors per request, or 5.6*32 = 179.9 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.3 sectors per request, or 5.3*32 = 169.2 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    One or More Eligible                                                                 %                          38.38
    Issued Warp Per Scheduler                                                                                        0.38
    No Eligible                                                                          %                          61.62
    Active Warps Per Scheduler                                                        warp                           1.00
    Eligible Warps Per Scheduler                                                      warp                           0.38
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          1.00 active warps per scheduler, which already limits the scheduler to less than a warp per instruction.      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The 1.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. Use the Occupancy section to identify what limits this kernel's theoretical occupancy. 

    Section: Warp State Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Warp Cycles Per Issued Instruction                                               cycle                           2.60
    Warp Cycles Per Executed Instruction                                             cycle                           2.60
    Avg. Active Threads Per Warp                                                                                    25.96
    Avg. Not Predicated Off Threads Per Warp                                                                        25.53
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   On average, each warp of this kernel spends 1.1 cycles being stalled on a fixed latency execution dependency. 
          This represents about 41.0% of the total average of 2.6 cycles between issuing two instructions. Typically,   
          this stall reason should be very low and only shows up as a top contributor in already highly optimized       
          kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps,        
          restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions,     
          e.g. by making use of fast math compiler options.                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Source Counters section for the top stall locations in your source based on sampling data. The      
          Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides   
          more details on each stall reason.                                                                            

    Section: Instruction Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Avg. Executed Instructions Per Scheduler                                          inst                       54705.81
    Executed Instructions                                                             inst                        8752930
    Avg. Issued Instructions Per Scheduler                                            inst                       54708.31
    Issued Instructions                                                               inst                        8753330
    ---------------------------------------------------------------------- --------------- ------------------------------

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                        128
    Function Cache Configuration                                                                cudaFuncCachePreferShared
    Grid Size                                                                                                          25
    Registers Per Thread                                                   register/thread                            255
    Shared Memory Configuration Size                                                 Kbyte                          65.54
    Driver Shared Memory Per Block                                              byte/block                              0
    Dynamic Shared Memory Per Block                                            Kbyte/block                          65.54
    Static Shared Memory Per Block                                              byte/block                              0
    Threads                                                                         thread                           3200
    Waves Per SM                                                                                                     0.62
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   The grid for this launch is configured to execute only 25 blocks, which is less than the GPU's 40             
          multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel      
          concurrently with other workloads, consider reducing the block size to have at least one block per            
          multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the    
          Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model)            
          description for more details on launch configurations.                                                        

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             16
    Block Limit Registers                                                            block                              2
    Block Limit Shared Mem                                                           block                              1
    Block Limit Warps                                                                block                              8
    Theoretical Active Warps per SM                                                   warp                              4
    Theoretical Occupancy                                                                %                          12.50
    Achieved Occupancy                                                                   %                          12.50
    Achieved Active Warps Per SM                                                      warp                           4.00
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (12.5%) is limited by the required amount of shared memory See the CUDA   
          Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for      
          more details on optimizing occupancy.                                                                         

    Section: Source Counters
    ---------------------------------------------------------------------- --------------- ------------------------------
    Branch Instructions Ratio                                                            %                           0.01
    Branch Instructions                                                               inst                          47523
    Branch Efficiency                                                                    %                          99.59
    Avg. Divergent Branches                                                                                          1.18
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel has uncoalesced global accesses resulting in a total of 160512 excessive sectors (31% of the      
          total 524491 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source         
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   This kernel has uncoalesced shared accesses resulting in a total of 771840 excessive wavefronts (40% of the   
          total 1933560 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -aa) has an example on optimizing shared memory accesses.                                                     

  matMul(int, float *, float *, float *), 2024-May-13 21:09:58, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           4.97
    SM Frequency                                                             cycle/usecond                         582.39
    Elapsed Cycles                                                                   cycle                         231158
    Memory [%]                                                                           %                          27.90
    DRAM Throughput                                                                      %                           3.39
    Duration                                                                       usecond                         396.90
    L1/TEX Cache Throughput                                                              %                          46.81
    L2 Cache Throughput                                                                  %                           3.93
    SM Active Cycles                                                                 cycle                      142158.83
    Compute (SM) [%]                                                                     %                          31.77
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel grid is too small to fill the available resources on this device, resulting in only 0.6 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 24%   
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for mode details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Executed Ipc Active                                                         inst/cycle                           1.54
    Executed Ipc Elapsed                                                        inst/cycle                           0.95
    Issue Slots Busy                                                                     %                          38.48
    Issued Ipc Active                                                           inst/cycle                           1.54
    SM Busy                                                                              %                          51.66
    ---------------------------------------------------------------------- --------------- ------------------------------
          No compute pipeline is over-utilized.                                                                         

    Section: Memory Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Memory Throughput                                                         Gbyte/second                          10.79
    Mem Busy                                                                             %                          23.41
    Max Bandwidth                                                                        %                          27.90
    L1/TEX Hit Rate                                                                      %                          26.21
    L2 Hit Rate                                                                          %                          87.41
    Mem Pipes Busy                                                                       %                          27.90
    ---------------------------------------------------------------------- --------------- ------------------------------

    WRN   The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.6 sectors per request, or 5.6*32 = 179.9 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.3 sectors per request, or 5.3*32 = 169.2 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    One or More Eligible                                                                 %                          38.40
    Issued Warp Per Scheduler                                                                                        0.38
    No Eligible                                                                          %                          61.60
    Active Warps Per Scheduler                                                        warp                           1.00
    Eligible Warps Per Scheduler                                                      warp                           0.38
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          1.00 active warps per scheduler, which already limits the scheduler to less than a warp per instruction.      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The 1.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. Use the Occupancy section to identify what limits this kernel's theoretical occupancy. 

    Section: Warp State Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Warp Cycles Per Issued Instruction                                               cycle                           2.60
    Warp Cycles Per Executed Instruction                                             cycle                           2.60
    Avg. Active Threads Per Warp                                                                                    25.96
    Avg. Not Predicated Off Threads Per Warp                                                                        25.53
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   On average, each warp of this kernel spends 1.1 cycles being stalled on a fixed latency execution dependency. 
          This represents about 41.0% of the total average of 2.6 cycles between issuing two instructions. Typically,   
          this stall reason should be very low and only shows up as a top contributor in already highly optimized       
          kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps,        
          restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions,     
          e.g. by making use of fast math compiler options.                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Source Counters section for the top stall locations in your source based on sampling data. The      
          Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides   
          more details on each stall reason.                                                                            

    Section: Instruction Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Avg. Executed Instructions Per Scheduler                                          inst                       54705.81
    Executed Instructions                                                             inst                        8752930
    Avg. Issued Instructions Per Scheduler                                            inst                       54708.31
    Issued Instructions                                                               inst                        8753330
    ---------------------------------------------------------------------- --------------- ------------------------------

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                        128
    Function Cache Configuration                                                                cudaFuncCachePreferShared
    Grid Size                                                                                                          25
    Registers Per Thread                                                   register/thread                            255
    Shared Memory Configuration Size                                                 Kbyte                          65.54
    Driver Shared Memory Per Block                                              byte/block                              0
    Dynamic Shared Memory Per Block                                            Kbyte/block                          65.54
    Static Shared Memory Per Block                                              byte/block                              0
    Threads                                                                         thread                           3200
    Waves Per SM                                                                                                     0.62
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   The grid for this launch is configured to execute only 25 blocks, which is less than the GPU's 40             
          multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel      
          concurrently with other workloads, consider reducing the block size to have at least one block per            
          multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the    
          Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model)            
          description for more details on launch configurations.                                                        

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             16
    Block Limit Registers                                                            block                              2
    Block Limit Shared Mem                                                           block                              1
    Block Limit Warps                                                                block                              8
    Theoretical Active Warps per SM                                                   warp                              4
    Theoretical Occupancy                                                                %                          12.50
    Achieved Occupancy                                                                   %                          12.50
    Achieved Active Warps Per SM                                                      warp                           4.00
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (12.5%) is limited by the required amount of shared memory See the CUDA   
          Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for      
          more details on optimizing occupancy.                                                                         

    Section: Source Counters
    ---------------------------------------------------------------------- --------------- ------------------------------
    Branch Instructions Ratio                                                            %                           0.01
    Branch Instructions                                                               inst                          47523
    Branch Efficiency                                                                    %                          99.59
    Avg. Divergent Branches                                                                                          1.18
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel has uncoalesced global accesses resulting in a total of 160512 excessive sectors (31% of the      
          total 524491 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source         
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   This kernel has uncoalesced shared accesses resulting in a total of 771840 excessive wavefronts (40% of the   
          total 1933560 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -aa) has an example on optimizing shared memory accesses.                                                     

  matMul(int, float *, float *, float *), 2024-May-13 21:10:01, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           4.97
    SM Frequency                                                             cycle/usecond                         582.40
    Elapsed Cycles                                                                   cycle                         231361
    Memory [%]                                                                           %                          27.88
    DRAM Throughput                                                                      %                           3.36
    Duration                                                                       usecond                         397.25
    L1/TEX Cache Throughput                                                              %                          46.77
    L2 Cache Throughput                                                                  %                           3.93
    SM Active Cycles                                                                 cycle                      142162.48
    Compute (SM) [%]                                                                     %                          31.75
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel grid is too small to fill the available resources on this device, resulting in only 0.6 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 24%   
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for mode details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Executed Ipc Active                                                         inst/cycle                           1.54
    Executed Ipc Elapsed                                                        inst/cycle                           0.95
    Issue Slots Busy                                                                     %                          38.48
    Issued Ipc Active                                                           inst/cycle                           1.54
    SM Busy                                                                              %                          51.66
    ---------------------------------------------------------------------- --------------- ------------------------------
          No compute pipeline is over-utilized.                                                                         

    Section: Memory Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Memory Throughput                                                         Gbyte/second                          10.69
    Mem Busy                                                                             %                          23.39
    Max Bandwidth                                                                        %                          27.88
    L1/TEX Hit Rate                                                                      %                          26.21
    L2 Hit Rate                                                                          %                          87.43
    Mem Pipes Busy                                                                       %                          27.88
    ---------------------------------------------------------------------- --------------- ------------------------------

    WRN   The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.6 sectors per request, or 5.6*32 = 179.9 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.3 sectors per request, or 5.3*32 = 169.2 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    One or More Eligible                                                                 %                          38.37
    Issued Warp Per Scheduler                                                                                        0.38
    No Eligible                                                                          %                          61.63
    Active Warps Per Scheduler                                                        warp                           1.00
    Eligible Warps Per Scheduler                                                      warp                           0.38
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          1.00 active warps per scheduler, which already limits the scheduler to less than a warp per instruction.      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The 1.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. Use the Occupancy section to identify what limits this kernel's theoretical occupancy. 

    Section: Warp State Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Warp Cycles Per Issued Instruction                                               cycle                           2.60
    Warp Cycles Per Executed Instruction                                             cycle                           2.60
    Avg. Active Threads Per Warp                                                                                    25.96
    Avg. Not Predicated Off Threads Per Warp                                                                        25.53
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   On average, each warp of this kernel spends 1.1 cycles being stalled on a fixed latency execution dependency. 
          This represents about 40.9% of the total average of 2.6 cycles between issuing two instructions. Typically,   
          this stall reason should be very low and only shows up as a top contributor in already highly optimized       
          kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps,        
          restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions,     
          e.g. by making use of fast math compiler options.                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Source Counters section for the top stall locations in your source based on sampling data. The      
          Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides   
          more details on each stall reason.                                                                            

    Section: Instruction Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Avg. Executed Instructions Per Scheduler                                          inst                       54705.81
    Executed Instructions                                                             inst                        8752930
    Avg. Issued Instructions Per Scheduler                                            inst                       54708.31
    Issued Instructions                                                               inst                        8753330
    ---------------------------------------------------------------------- --------------- ------------------------------

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                        128
    Function Cache Configuration                                                                cudaFuncCachePreferShared
    Grid Size                                                                                                          25
    Registers Per Thread                                                   register/thread                            255
    Shared Memory Configuration Size                                                 Kbyte                          65.54
    Driver Shared Memory Per Block                                              byte/block                              0
    Dynamic Shared Memory Per Block                                            Kbyte/block                          65.54
    Static Shared Memory Per Block                                              byte/block                              0
    Threads                                                                         thread                           3200
    Waves Per SM                                                                                                     0.62
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   The grid for this launch is configured to execute only 25 blocks, which is less than the GPU's 40             
          multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel      
          concurrently with other workloads, consider reducing the block size to have at least one block per            
          multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the    
          Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model)            
          description for more details on launch configurations.                                                        

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             16
    Block Limit Registers                                                            block                              2
    Block Limit Shared Mem                                                           block                              1
    Block Limit Warps                                                                block                              8
    Theoretical Active Warps per SM                                                   warp                              4
    Theoretical Occupancy                                                                %                          12.50
    Achieved Occupancy                                                                   %                          12.50
    Achieved Active Warps Per SM                                                      warp                           4.00
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (12.5%) is limited by the required amount of shared memory See the CUDA   
          Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for      
          more details on optimizing occupancy.                                                                         

    Section: Source Counters
    ---------------------------------------------------------------------- --------------- ------------------------------
    Branch Instructions Ratio                                                            %                           0.01
    Branch Instructions                                                               inst                          47523
    Branch Efficiency                                                                    %                          99.59
    Avg. Divergent Branches                                                                                          1.18
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel has uncoalesced global accesses resulting in a total of 160512 excessive sectors (31% of the      
          total 524491 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source         
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   This kernel has uncoalesced shared accesses resulting in a total of 771840 excessive wavefronts (40% of the   
          total 1933560 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -aa) has an example on optimizing shared memory accesses.                                                     

  matMul(int, float *, float *, float *), 2024-May-13 21:10:03, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           4.98
    SM Frequency                                                             cycle/usecond                         582.85
    Elapsed Cycles                                                                   cycle                         231244
    Memory [%]                                                                           %                          27.89
    DRAM Throughput                                                                      %                           3.37
    Duration                                                                       usecond                         396.74
    L1/TEX Cache Throughput                                                              %                          46.80
    L2 Cache Throughput                                                                  %                           3.93
    SM Active Cycles                                                                 cycle                      142086.45
    Compute (SM) [%]                                                                     %                          31.76
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel grid is too small to fill the available resources on this device, resulting in only 0.6 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 24%   
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for mode details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Executed Ipc Active                                                         inst/cycle                           1.54
    Executed Ipc Elapsed                                                        inst/cycle                           0.95
    Issue Slots Busy                                                                     %                          38.50
    Issued Ipc Active                                                           inst/cycle                           1.54
    SM Busy                                                                              %                          51.69
    ---------------------------------------------------------------------- --------------- ------------------------------
          No compute pipeline is over-utilized.                                                                         

    Section: Memory Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Memory Throughput                                                         Gbyte/second                          10.73
    Mem Busy                                                                             %                          23.40
    Max Bandwidth                                                                        %                          27.89
    L1/TEX Hit Rate                                                                      %                          26.20
    L2 Hit Rate                                                                          %                          87.40
    Mem Pipes Busy                                                                       %                          27.89
    ---------------------------------------------------------------------- --------------- ------------------------------

    WRN   The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.6 sectors per request, or 5.6*32 = 179.9 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.3 sectors per request, or 5.3*32 = 169.2 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    One or More Eligible                                                                 %                          38.39
    Issued Warp Per Scheduler                                                                                        0.38
    No Eligible                                                                          %                          61.61
    Active Warps Per Scheduler                                                        warp                           1.00
    Eligible Warps Per Scheduler                                                      warp                           0.38
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          1.00 active warps per scheduler, which already limits the scheduler to less than a warp per instruction.      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The 1.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. Use the Occupancy section to identify what limits this kernel's theoretical occupancy. 

    Section: Warp State Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Warp Cycles Per Issued Instruction                                               cycle                           2.60
    Warp Cycles Per Executed Instruction                                             cycle                           2.60
    Avg. Active Threads Per Warp                                                                                    25.96
    Avg. Not Predicated Off Threads Per Warp                                                                        25.53
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   On average, each warp of this kernel spends 1.1 cycles being stalled on a fixed latency execution dependency. 
          This represents about 41.0% of the total average of 2.6 cycles between issuing two instructions. Typically,   
          this stall reason should be very low and only shows up as a top contributor in already highly optimized       
          kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps,        
          restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions,     
          e.g. by making use of fast math compiler options.                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Source Counters section for the top stall locations in your source based on sampling data. The      
          Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides   
          more details on each stall reason.                                                                            

    Section: Instruction Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Avg. Executed Instructions Per Scheduler                                          inst                       54705.81
    Executed Instructions                                                             inst                        8752930
    Avg. Issued Instructions Per Scheduler                                            inst                       54708.31
    Issued Instructions                                                               inst                        8753330
    ---------------------------------------------------------------------- --------------- ------------------------------

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                        128
    Function Cache Configuration                                                                cudaFuncCachePreferShared
    Grid Size                                                                                                          25
    Registers Per Thread                                                   register/thread                            255
    Shared Memory Configuration Size                                                 Kbyte                          65.54
    Driver Shared Memory Per Block                                              byte/block                              0
    Dynamic Shared Memory Per Block                                            Kbyte/block                          65.54
    Static Shared Memory Per Block                                              byte/block                              0
    Threads                                                                         thread                           3200
    Waves Per SM                                                                                                     0.62
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   The grid for this launch is configured to execute only 25 blocks, which is less than the GPU's 40             
          multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel      
          concurrently with other workloads, consider reducing the block size to have at least one block per            
          multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the    
          Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model)            
          description for more details on launch configurations.                                                        

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             16
    Block Limit Registers                                                            block                              2
    Block Limit Shared Mem                                                           block                              1
    Block Limit Warps                                                                block                              8
    Theoretical Active Warps per SM                                                   warp                              4
    Theoretical Occupancy                                                                %                          12.50
    Achieved Occupancy                                                                   %                          12.50
    Achieved Active Warps Per SM                                                      warp                           4.00
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (12.5%) is limited by the required amount of shared memory See the CUDA   
          Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for      
          more details on optimizing occupancy.                                                                         

    Section: Source Counters
    ---------------------------------------------------------------------- --------------- ------------------------------
    Branch Instructions Ratio                                                            %                           0.01
    Branch Instructions                                                               inst                          47523
    Branch Efficiency                                                                    %                          99.59
    Avg. Divergent Branches                                                                                          1.18
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel has uncoalesced global accesses resulting in a total of 160512 excessive sectors (31% of the      
          total 524491 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source         
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   This kernel has uncoalesced shared accesses resulting in a total of 771840 excessive wavefronts (40% of the   
          total 1933560 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -aa) has an example on optimizing shared memory accesses.                                                     

  matMul(int, float *, float *, float *), 2024-May-13 21:10:06, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           4.97
    SM Frequency                                                             cycle/usecond                         582.03
    Elapsed Cycles                                                                   cycle                         231175
    Memory [%]                                                                           %                          27.90
    DRAM Throughput                                                                      %                           3.35
    Duration                                                                       usecond                         397.18
    L1/TEX Cache Throughput                                                              %                          46.81
    L2 Cache Throughput                                                                  %                           3.93
    SM Active Cycles                                                                 cycle                      142179.75
    Compute (SM) [%]                                                                     %                          31.77
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel grid is too small to fill the available resources on this device, resulting in only 0.6 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 24%   
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for mode details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Executed Ipc Active                                                         inst/cycle                           1.54
    Executed Ipc Elapsed                                                        inst/cycle                           0.95
    Issue Slots Busy                                                                     %                          38.48
    Issued Ipc Active                                                           inst/cycle                           1.54
    SM Busy                                                                              %                          51.66
    ---------------------------------------------------------------------- --------------- ------------------------------
          No compute pipeline is over-utilized.                                                                         

    Section: Memory Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Memory Throughput                                                         Gbyte/second                          10.65
    Mem Busy                                                                             %                          23.41
    Max Bandwidth                                                                        %                          27.90
    L1/TEX Hit Rate                                                                      %                          26.20
    L2 Hit Rate                                                                          %                          87.40
    Mem Pipes Busy                                                                       %                          27.90
    ---------------------------------------------------------------------- --------------- ------------------------------

    WRN   The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.6 sectors per request, or 5.6*32 = 179.9 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.3 sectors per request, or 5.3*32 = 169.2 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    One or More Eligible                                                                 %                          38.37
    Issued Warp Per Scheduler                                                                                        0.38
    No Eligible                                                                          %                          61.63
    Active Warps Per Scheduler                                                        warp                           1.00
    Eligible Warps Per Scheduler                                                      warp                           0.38
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          1.00 active warps per scheduler, which already limits the scheduler to less than a warp per instruction.      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The 1.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. Use the Occupancy section to identify what limits this kernel's theoretical occupancy. 

    Section: Warp State Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Warp Cycles Per Issued Instruction                                               cycle                           2.60
    Warp Cycles Per Executed Instruction                                             cycle                           2.60
    Avg. Active Threads Per Warp                                                                                    25.96
    Avg. Not Predicated Off Threads Per Warp                                                                        25.53
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   On average, each warp of this kernel spends 1.1 cycles being stalled on a fixed latency execution dependency. 
          This represents about 41.0% of the total average of 2.6 cycles between issuing two instructions. Typically,   
          this stall reason should be very low and only shows up as a top contributor in already highly optimized       
          kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps,        
          restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions,     
          e.g. by making use of fast math compiler options.                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Source Counters section for the top stall locations in your source based on sampling data. The      
          Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides   
          more details on each stall reason.                                                                            

    Section: Instruction Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Avg. Executed Instructions Per Scheduler                                          inst                       54705.81
    Executed Instructions                                                             inst                        8752930
    Avg. Issued Instructions Per Scheduler                                            inst                       54708.31
    Issued Instructions                                                               inst                        8753330
    ---------------------------------------------------------------------- --------------- ------------------------------

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                        128
    Function Cache Configuration                                                                cudaFuncCachePreferShared
    Grid Size                                                                                                          25
    Registers Per Thread                                                   register/thread                            255
    Shared Memory Configuration Size                                                 Kbyte                          65.54
    Driver Shared Memory Per Block                                              byte/block                              0
    Dynamic Shared Memory Per Block                                            Kbyte/block                          65.54
    Static Shared Memory Per Block                                              byte/block                              0
    Threads                                                                         thread                           3200
    Waves Per SM                                                                                                     0.62
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   The grid for this launch is configured to execute only 25 blocks, which is less than the GPU's 40             
          multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel      
          concurrently with other workloads, consider reducing the block size to have at least one block per            
          multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the    
          Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model)            
          description for more details on launch configurations.                                                        

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             16
    Block Limit Registers                                                            block                              2
    Block Limit Shared Mem                                                           block                              1
    Block Limit Warps                                                                block                              8
    Theoretical Active Warps per SM                                                   warp                              4
    Theoretical Occupancy                                                                %                          12.50
    Achieved Occupancy                                                                   %                          12.50
    Achieved Active Warps Per SM                                                      warp                           4.00
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (12.5%) is limited by the required amount of shared memory See the CUDA   
          Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for      
          more details on optimizing occupancy.                                                                         

    Section: Source Counters
    ---------------------------------------------------------------------- --------------- ------------------------------
    Branch Instructions Ratio                                                            %                           0.01
    Branch Instructions                                                               inst                          47523
    Branch Efficiency                                                                    %                          99.59
    Avg. Divergent Branches                                                                                          1.18
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel has uncoalesced global accesses resulting in a total of 160512 excessive sectors (31% of the      
          total 524491 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source         
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   This kernel has uncoalesced shared accesses resulting in a total of 771840 excessive wavefronts (40% of the   
          total 1933560 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -aa) has an example on optimizing shared memory accesses.                                                     

  matMul(int, float *, float *, float *), 2024-May-13 21:10:08, Context 1, Stream 7
    Section: GPU Speed Of Light Throughput
    ---------------------------------------------------------------------- --------------- ------------------------------
    DRAM Frequency                                                           cycle/nsecond                           4.97
    SM Frequency                                                             cycle/usecond                         582.23
    Elapsed Cycles                                                                   cycle                         231181
    Memory [%]                                                                           %                          27.90
    DRAM Throughput                                                                      %                           3.37
    Duration                                                                       usecond                         397.06
    L1/TEX Cache Throughput                                                              %                          46.81
    L2 Cache Throughput                                                                  %                           3.93
    SM Active Cycles                                                                 cycle                      142182.60
    Compute (SM) [%]                                                                     %                          31.77
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel grid is too small to fill the available resources on this device, resulting in only 0.6 full      
          waves across all SMs. Look at Launch Statistics for more details.                                             

    INF   The ratio of peak float (fp32) to double (fp64) performance on this device is 32:1. The kernel achieved 24%   
          of this device's fp32 peak performance and 0% of its fp64 peak performance. See the Kernel Profiling Guide    
          (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#roofline) for mode details on roofline      
          analysis.                                                                                                     

    Section: Compute Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Executed Ipc Active                                                         inst/cycle                           1.54
    Executed Ipc Elapsed                                                        inst/cycle                           0.95
    Issue Slots Busy                                                                     %                          38.48
    Issued Ipc Active                                                           inst/cycle                           1.54
    SM Busy                                                                              %                          51.65
    ---------------------------------------------------------------------- --------------- ------------------------------
          No compute pipeline is over-utilized.                                                                         

    Section: Memory Workload Analysis
    ---------------------------------------------------------------------- --------------- ------------------------------
    Memory Throughput                                                         Gbyte/second                          10.72
    Mem Busy                                                                             %                          23.40
    Max Bandwidth                                                                        %                          27.90
    L1/TEX Hit Rate                                                                      %                          26.21
    L2 Hit Rate                                                                          %                          87.42
    Mem Pipes Busy                                                                       %                          27.90
    ---------------------------------------------------------------------- --------------- ------------------------------

    WRN   The memory access pattern for global stores in L1TEX might not be optimal. On average, this kernel accesses   
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.6 sectors per request, or 5.6*32 = 179.9 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global stores.                                                                                    
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for global loads in L1TEX might not be optimal. On average, this kernel accesses    
          4.0 bytes per thread per memory request; but the address pattern, possibly caused by the stride between       
          threads, results in 5.3 sectors per request, or 5.3*32 = 169.2 bytes of cache data transfers per request.     
          The optimal thread address pattern for 4.0 byte accesses would result in 4.0*32 = 128.0 bytes of cache data   
          transfers per request, to maximize L1TEX cache performance. Check the Source Counters section for             
          uncoalesced global loads.                                                                                     
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for loads from L1TEX to L2 is not optimal. The granularity of an L1TEX request to   
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 1.7 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced loads and try to minimize how many cache lines need to be accessed per memory         
          request.                                                                                                      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The memory access pattern for stores from L1TEX to L2 is not optimal. The granularity of an L1TEX request to  
          L2 is a 128 byte cache line. That is 4 consecutive 32-byte sectors per L2 request. However, this kernel only  
          accesses an average of 2.9 sectors out of the possible 4 sectors per cache line. Check the Source Counters    
          section for uncoalesced stores and try to minimize how many cache lines need to be accessed per memory        
          request.                                                                                                      

    Section: Scheduler Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    One or More Eligible                                                                 %                          38.39
    Issued Warp Per Scheduler                                                                                        0.38
    No Eligible                                                                          %                          61.61
    Active Warps Per Scheduler                                                        warp                           1.00
    Eligible Warps Per Scheduler                                                      warp                           0.38
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   Every scheduler is capable of issuing one instruction per cycle, but for this kernel each scheduler only      
          issues an instruction every 2.6 cycles. This might leave hardware resources underutilized and may lead to     
          less optimal performance. Out of the maximum of 8 warps per scheduler, this kernel allocates an average of    
          1.00 active warps per scheduler, which already limits the scheduler to less than a warp per instruction.      
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   The 1.00 theoretical warps per scheduler this kernel can issue according to its occupancy are below the       
          hardware maximum of 8. Use the Occupancy section to identify what limits this kernel's theoretical occupancy. 

    Section: Warp State Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Warp Cycles Per Issued Instruction                                               cycle                           2.60
    Warp Cycles Per Executed Instruction                                             cycle                           2.60
    Avg. Active Threads Per Warp                                                                                    25.96
    Avg. Not Predicated Off Threads Per Warp                                                                        25.53
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   On average, each warp of this kernel spends 1.1 cycles being stalled on a fixed latency execution dependency. 
          This represents about 41.0% of the total average of 2.6 cycles between issuing two instructions. Typically,   
          this stall reason should be very low and only shows up as a top contributor in already highly optimized       
          kernels. Try to hide the corresponding instruction latencies by increasing the number of active warps,        
          restructuring the code or unrolling loops. Furthermore, consider switching to lower-latency instructions,     
          e.g. by making use of fast math compiler options.                                                             
    ----- --------------------------------------------------------------------------------------------------------------
    INF   Check the Source Counters section for the top stall locations in your source based on sampling data. The      
          Kernel Profiling Guide (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#sampling) provides   
          more details on each stall reason.                                                                            

    Section: Instruction Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Avg. Executed Instructions Per Scheduler                                          inst                       54705.81
    Executed Instructions                                                             inst                        8752930
    Avg. Issued Instructions Per Scheduler                                            inst                       54708.31
    Issued Instructions                                                               inst                        8753330
    ---------------------------------------------------------------------- --------------- ------------------------------

    Section: Launch Statistics
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Size                                                                                                        128
    Function Cache Configuration                                                                cudaFuncCachePreferShared
    Grid Size                                                                                                          25
    Registers Per Thread                                                   register/thread                            255
    Shared Memory Configuration Size                                                 Kbyte                          65.54
    Driver Shared Memory Per Block                                              byte/block                              0
    Dynamic Shared Memory Per Block                                            Kbyte/block                          65.54
    Static Shared Memory Per Block                                              byte/block                              0
    Threads                                                                         thread                           3200
    Waves Per SM                                                                                                     0.62
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   The grid for this launch is configured to execute only 25 blocks, which is less than the GPU's 40             
          multiprocessors. This can underutilize some multiprocessors. If you do not intend to execute this kernel      
          concurrently with other workloads, consider reducing the block size to have at least one block per            
          multiprocessor or increase the size of the grid to fully utilize the available hardware resources. See the    
          Hardware Model (https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-hw-model)            
          description for more details on launch configurations.                                                        

    Section: Occupancy
    ---------------------------------------------------------------------- --------------- ------------------------------
    Block Limit SM                                                                   block                             16
    Block Limit Registers                                                            block                              2
    Block Limit Shared Mem                                                           block                              1
    Block Limit Warps                                                                block                              8
    Theoretical Active Warps per SM                                                   warp                              4
    Theoretical Occupancy                                                                %                          12.50
    Achieved Occupancy                                                                   %                          12.50
    Achieved Active Warps Per SM                                                      warp                           4.00
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel's theoretical occupancy (12.5%) is limited by the required amount of shared memory See the CUDA   
          Best Practices Guide (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#occupancy) for      
          more details on optimizing occupancy.                                                                         

    Section: Source Counters
    ---------------------------------------------------------------------- --------------- ------------------------------
    Branch Instructions Ratio                                                            %                           0.01
    Branch Instructions                                                               inst                          47523
    Branch Efficiency                                                                    %                          99.59
    Avg. Divergent Branches                                                                                          1.18
    ---------------------------------------------------------------------- --------------- ------------------------------
    WRN   This kernel has uncoalesced global accesses resulting in a total of 160512 excessive sectors (31% of the      
          total 524491 sectors). Check the L2 Theoretical Sectors Global Excessive table for the primary source         
          locations. The CUDA Programming Guide                                                                         
          (https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-accesses) had additional      
          information on reducing uncoalesced device memory accesses.                                                   
    ----- --------------------------------------------------------------------------------------------------------------
    WRN   This kernel has uncoalesced shared accesses resulting in a total of 771840 excessive wavefronts (40% of the   
          total 1933560 wavefronts). Check the L1 Wavefronts Shared Excessive table for the primary source locations.   
          The CUDA Best Practices Guide                                                                                 
           (https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html#shared-memory-in-matrix-multiplication-c
          -aa) has an example on optimizing shared memory accesses.                                                     

